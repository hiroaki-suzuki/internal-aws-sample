AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for internal network environment
Parameters:
  CidrBlockAppVPC:
    Type: String
    Default: 172.16.0.0/16
  CidrBlockAppPrivateSubnetA:
    Type: String
    Default: 172.16.0.0/24

Resources:
  # ネットワーク
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlockAppVPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "vpc" ] ]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: !Ref CidrBlockAppPrivateSubnetA
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "private", "subnet", "a" ] ]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "private", "rtb" ] ]
  PrivateRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref AWS::StackName, "private", "sg" ] ]
      GroupDescription: "private security group"
      VpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "private", "sg" ] ]
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref AWS::StackName, "vpce", "sg" ] ]
      GroupDescription: "vpc endpoint security group"
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrBlockAppVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "vpce", "sg" ] ]
  # VPCエンドポイント
  VPCEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ssm
      VpcEndpointType: Interface
      VpcId: !Ref AppVPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ssmmessages
      VpcEndpointType: Interface
      VpcId: !Ref AppVPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointEC2Message:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ec2messages
      VpcEndpointType: Interface
      VpcId: !Ref AppVPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  #  # 踏み台サーバーM
  BastionEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, "bastion", "ec2", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  BastionEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionEC2Role
  EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0bba69335379e17f8"
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile: !Ref BastionEC2InstanceProfile
      KeyName: aws-rirazou0101
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "bastion", "ec2" ] ]
  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join [ "-", [ !Ref AWS::StackName, "user", "pool" ] ]
      AliasAttributes:
        - preferred_username
      EmailVerificationMessage: "○○システムの登録確認です。確認コードは、{####} です。"
      EmailVerificationSubject: "○○システム登録確認"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: internal-front
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED
  IdPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join [ "-", [ !Ref AWS::StackName, "id", "pool" ] ]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
  UnauthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [ !Ref AWS::StackName, "cognito", "unauthenticated", "policy" ] ]
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mobileanalytics:PutEvents",
              "cognito-sync:*"
            ],
            "Resource": "*"
          }
        ]
      }
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, "cognito", "unauthenticated", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      ManagedPolicyArns:
        - Ref: UnauthenticatedPolicy
  AuthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [ !Ref AWS::StackName, "cognito", "authenticated", "policy" ] ]
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mobileanalytics:PutEvents",
              "cognito-sync:*",
              "cognito-identity:*",
              "execute-api:*"
            ],
            "Resource": "*"
          }
        ]
      }
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, "cognito", "authenticated", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
        - Ref: AuthenticatedPolicy
  IdPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdPool
      Roles:
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
        authenticated: !GetAtt AuthenticatedRole.Arn
